
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 02 19:12:01 CDT 2012
//----------------------------------------------------

package autogen;

import common.Listing;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 02 19:12:01 CDT 2012
  */
public class Parsercup2 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parsercup2() {super();}

  /** Constructor which sets the default scanner. */
  public Parsercup2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parsercup2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\013\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\010\016\004\017\007\020\005\001\002\000" +
    "\010\021\010\022\011\023\013\001\002\000\010\021\010" +
    "\022\011\023\013\001\002\000\004\002\023\001\002\000" +
    "\010\021\010\022\011\023\013\001\002\000\012\024\014" +
    "\025\020\026\016\027\017\001\002\000\012\024\014\025" +
    "\020\026\016\027\017\001\002\000\004\002\uffff\001\002" +
    "\000\012\024\014\025\020\026\016\027\017\001\002\000" +
    "\004\002\ufffa\001\002\000\004\002\ufffb\001\002\000\004" +
    "\002\ufff8\001\002\000\004\002\ufff7\001\002\000\004\002" +
    "\ufff9\001\002\000\004\002\ufffc\001\002\000\004\002\ufffd" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\004\002\005\001\001\000\004\003\024\001" +
    "\001\000\004\003\023\001\001\000\002\001\001\000\004" +
    "\003\011\001\001\000\004\004\021\001\001\000\004\004" +
    "\020\001\001\000\002\001\001\000\004\004\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parsercup2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parsercup2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parsercup2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parsercup2$actions {
  private final Parsercup2 parser;

  /** Constructor */
  CUP$Parsercup2$actions(Parsercup2 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parsercup2$do_action(
    int                        CUP$Parsercup2$act_num,
    java_cup.runtime.lr_parser CUP$Parsercup2$parser,
    java.util.Stack            CUP$Parsercup2$stack,
    int                        CUP$Parsercup2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parsercup2$result;

      /* select the action based on the action number */
      switch (CUP$Parsercup2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MealC ::= chicken 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealC",2, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MealC ::= shrimp 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealC",2, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MealC ::= tofu 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealC",2, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MealC ::= beef 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealC",2, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MealB ::= noodlesoup MealC 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealB",1, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MealB ::= eggdropsoup MealC 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealB",1, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // MealB ::= hotsoursoup MealC 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealB",1, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // MealA ::= salad MealB 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealA",0, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MealA ::= wonton MealB 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealA",0, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= MealA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)).value;
		RESULT = start_val;
              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parsercup2$parser.done_parsing();
          return CUP$Parsercup2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // MealA ::= eggroll MealB 
            {
              Object RESULT =null;

              CUP$Parsercup2$result = parser.getSymbolFactory().newSymbol("MealA",0, ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.elementAt(CUP$Parsercup2$top-1)), ((java_cup.runtime.Symbol)CUP$Parsercup2$stack.peek()), RESULT);
            }
          return CUP$Parsercup2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

