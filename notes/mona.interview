public interface CustomerService {

  List<Contacts> getContactsFor(string customerId);

}

public class CustomerServiceImpl : CustomerServcie {

   public CustomerServiceImpl(IDatabase database) {...}
}

public MockDatabase implements IDatabase {

   public void setResult(List<Contacts> contacts)
}


[nunitTest]
public class CustomerServiceTest {

   private const string ValidCustomerId = "123";
   private const string ValidCustomerId2 = "124";
   private const string InvalidCustomerId = "ABC";
   private CustomerService service;
   
   [TestSetup]
   public void testSetup() {
      service = InitializeService();
   }

    //Give a valid CustomerID and check if contacts list is empty
   [Test]
   public void test() {
       List<Contacts> l = service.getContactsFor(ValidCustomerId);
       AssertEx.IsNotEmpty(l);
   
   }
   
   
   //Give an invalid customer ID and get an exception
   [Test]
   public void test2() {
       try{
           List<Contacts> l = service.getContactsFor(InValidCustomerId);
       }
       catch(Exception ex){
       
           AssertEx.AreEqual("Customer does not exist", ex.message());
       }
   }
   
   //Give a CustomerID where you know the expected List of contacts. Check for the right number of contacts 
   //and the list contents.
   [Test]
   public void test3() {
       List<Contacts> l = service.getContactsFor(ValidCustomerId2);
       AssertEx.AreEqual(3,l.size());
   }
   
   //Give a null customerID and expect exception
   [Test]
   public void test4() {
       try{
           List<Contacts> l = service.getContactsFor(null);
       }
       catch(Exception ex){
       
           AssertEx.AreEqual("Null Exception", ex.message());
       }
   }
   
   //check for case sensitivity
   [Test]
   public void test5() {
          List<Contacts> l = service.getContactsFor(ValidCustomerId2.toLowerCase());
          List<Contacts> l2 = service.getContactsFor(ValidCustomerId2.toUpperCase());
       AssertEx.ContentsEqual(l,l2);
   
   }
   
}